#include "mqtt_wrapper.h"

// using MQTTClient = MQTT::Client<MQTTNetwork, Countdown>;

static EthernetInterface ethernet;
static MQTT::Client<MQTTNetwork, Countdown> *mqttClient = nullptr;

EthernetInterface *ethernetInterface()
{
    return &ethernet;
}

void ethernetConnect()
{
    ethernet.connect();
}

void ethernetConnect(const char *ip, const char *subnetMask,
        const char *defaultGateway)
{
    SocketAddress _ip, mask, gateway;

    _ip.set_ip_address(ip);
    mask.set_ip_address(subnetMask);
    gateway.set_ip_address(defaultGateway);

    if (ip != nullptr && strlen(ip) > 0) {
        ethernet.set_dhcp(false);
        ethernet.set_network(_ip, mask, gateway);
    }
    int status = ethernet.connect();
    if (status == 0)
        printf("Connected to ethernet interface");
    else
        printf("Failed to connect to ethernet interface");
}

void mqttConnect(const char *brokerHost, int port)
{
    static MQTTNetwork mqttNet(&ethernet);
    MQTTPacket_connectData connData = MQTTPacket_connectData_initializer;

    int status = mqttNet.connect(brokerHost, port);
    if (status == 0)
        printf("Connected to broker at %s port %d\n", brokerHost, port);
    else
        printf("Failed to connect to broker at %s port %d\n", brokerHost, port);

    mqttClient = new MQTT::Client<MQTTNetwork, Countdown>(mqttNet);
    status = mqttClient->connect(connData);
    if (status == 0)
        printf("MQTT client connected\n", brokerHost, port);
    else
        printf("Failed to connect MQTT client\n");
}

void mqttFirstResponder(MQTT::MessageData &msg)
{
    // TODO lenstring
    // const char *topic = data.topicName.cstring;
    // int len = data.topicName.lenstring.len;
    // MQTT::Message msg = data.message;
    // GenericDevice::instance()->mqttReceive(topic, [>payload<], len);
}

void mqttYield(int timeout_ms)
{
    // TODO
}

void mqttAutoSubscribe()
{
    // TODO automatically connect to handlers for data
    // THIS SHALL BE AUTOGENERATED
}

void mqttPublish(const char *topic, void *payload, size_t length)
{
    mqttClient->publish(topic, payload, length);
}

// TODO Expose in API
void mqttCleanup()
{

}

void ethernetCleanup()
{

}
