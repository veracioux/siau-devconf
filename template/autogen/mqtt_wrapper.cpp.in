#include "mqtt_wrapper.h"
#include "message_handler.h"

using MQTTClient = MQTT::Client<MQTTNetwork, Countdown, 100, $maxSubscriptions>;

static EthernetInterface ethernet;
static MQTTNetwork mqttNet(&ethernet);
static MQTTClient *mqttClient = nullptr;
static bool connectionApproved = false;

void _requestConnection()
{
    char payload[] = SERIAL_NO "\0" MODEL;
    mqttPublish(LOCATION "/_/requestConnection", payload, sizeof(payload));
}

void _connectionApprovalHandler(MQTT::MessageData &msg)
{
    connectionApproved = true;
}

EthernetInterface *ethernetInterface()
{
    return &ethernet;
}

void ethernetConnect()
{
    int status = ethernet.connect();
    if (status == 0)
        printf("Connected to ethernet interface\n");
    else
        printf("Failed to connect to ethernet interface\n");
}

void ethernetConnect(const char *ip, const char *subnetMask,
        const char *defaultGateway)
{
    SocketAddress _ip, mask, gateway;

    _ip.set_ip_address(ip);
    mask.set_ip_address(subnetMask);
    gateway.set_ip_address(defaultGateway);

    if (ip != nullptr && strlen(ip) > 0) {
        ethernet.set_dhcp(false);
        ethernet.set_network(_ip, mask, gateway);
    }
    int status = ethernet.connect();
    if (status == 0)
        printf("Connected to ethernet interface\n");
    else
        printf("Failed to connect to ethernet interface\n");
}

void mqttConnect(const char *brokerHost, int port)
{
    MQTTPacket_connectData connData = MQTTPacket_connectData_initializer;

    int status = mqttNet.connect(brokerHost, port);
    if (status == 0)
        printf("Connected to broker at %s port %d\n", brokerHost, port);
    else
        printf("Failed to connect to broker at %s port %d\n", brokerHost, port);

    mqttClient = new MQTTClient(mqttNet);
    status = mqttClient->connect(connData);
    if (status == 0)
        printf("MQTT client connected\n");
    else
        printf("Failed to connect MQTT client\n");

    mqttSubscribe(TOPIC_PREFIX "/approveConnection", _connectionApprovalHandler);
    _requestConnection();
}

void mqttYield(int timeout_ms)
{
    mqttClient->yield(timeout_ms);
    if (!connectionApproved)
        _requestConnection();
}

void mqttAutoSubscribe()
{
    /*** mqttAutoSubscribe ***/
}

void mqttSubscribe(const char *topic, MqttMessageHandler handler, MQTT::QoS qos)
{
    mqttClient->subscribe(topic, qos, handler);
}

void mqttPublish(const char *topic, void *payload, size_t length)
{
    mqttClient->publish(topic, payload, length);
}

void mqttCleanup()
{
    mqttClient->disconnect();
    mqttNet.disconnect();
}

void ethernetCleanup()
{
    ethernet.disconnect();
}
